"use client";
import React, { useEffect, useState } from "react";
import { Card } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { VisaPreview } from "../components/visa/VisaPreview";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { DocumentUploadSection } from "./DocumentUpload";
import {
  LanguageAndReligionSection,
  PersonalDetailsSection,
  AddressSection,
  ResidencySection,
  ProfessionalSection,
  ContactSection,
  AutoGeneratedFields,
  ApplicationStatus,
  TranslateButton,
  ActionButtons,
} from "./AdditionalFields";
import { VisaDetailsSection } from "./VisaDetailsSection";
import { Dialog, DialogContent } from "@radix-ui/react-dialog";

export default function VisaFormContainer({visa_fees, charges, country}) {
  const [formData, setFormData] = useState({
    // Basic Info
    arrivalDate: "",
    visaComments: "",
    uidNo: "",
    yourReference: "",

    // Visa Details
    visaType: "",
    sourceType: "",
    processType: "Normal",
    presentNationality: "",
    passportNo: "",
    gender: "",
    birthDate: "",
    birthCountry: "",
    dateOfIssue: "",
    expirationDate: "",
    comingFrom: "",

    // Personal Info
    maritalStatus: "",
    birthPlace: "",
    firstName: "",
    middleName: "",
    lastName: "",
    passportIssuePlace: "",
    fatherName: "",
    motherName: "",
    husbandName: "",

    // Additional Info
    language: "",
    religion: "",
    residingCountry: "",
    city: "",
    address: "",
    visitReason: "tourism",
    profession: "",
    education: "",
    beenResident: false,
    visitedBefore: false,
    groupMembership: "",
    mobile: "",

    // Checkboxes
    isPassportTravel: false,

    // Charges
    visa_fees: 0,
    charges: 0
  });

  useEffect(() => {
    if (visa_fees && charges) {
      setFormData((prev) => ({
        ...prev,
        visa_fees: visa_fees,
        charges: charges,
      }));
    }
  },[visa_fees, charges]);

  const [applicationStatus, setApplicationStatus] = useState("waiting");
  const [showPreview, setShowPreview] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showSuccess, setShowSuccess] = useState(false);
  const [documents, setDocuments] = useState({
    mainPassport: null,
    passportPage2: null,
    photo: null,
    returnTicket: null,
    otherDocs: null
  });

  const handleInputChange = (field, value) => {
    setFormData((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  const handleFileUpload = (file, type) => {
    setDocuments((prev) => ({
      ...prev,
      [type]: file,
    }));
  };

  const handleFileRemove = (type) => {
    setDocuments(prev => ({
      ...prev,
      [type]: null
    }));
  }

  const handleSubmit = async () => {
    setIsSubmitting(true);
    try {
      const uploadedFiles : any = {};
      console.log(documents)
      for(const [key, file ] of Object.entries(documents)) {
        if (file) {
          console.log(file)
          const signedUrlResponse = await fetch(`/evisa/generate-presigned-url?fileName=${file.name}&fileType=${file.type}`);
          const {url} = await signedUrlResponse.json();

          // Upload to s3 using this link
          const uploadResponse = await fetch(url, {
            method: "PUT",
            body: file,
            headers: {
              // "Content-Type": file.type,
              "Content-Type": "multipart/form-data",
            },
          });

          if (!uploadResponse.ok) throw new Error("Failed to upload file to S3");
          uploadedFiles[key] = url.split("?")[0];
        }
      }
      console.log(uploadedFiles)
      const response = await fetch("/api/send-email", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          status: applicationStatus,
          formData: {...formData, ...uploadedFiles},
        }),
      });

      if (!response.ok) {
        throw new Error("Failed to submit application");
      }

      setShowSuccess(true);
      window.location.href = "/applications"; // Redirect to applications table
    } catch (error) {
      alert("Failed to submit application. Please try again.");
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="relative">
      <div className="max-w-7xl mx-auto py-6 px-4">
        <Card className="p-6 space-y-8">
          <VisaDetailsSection formData={formData} handleInputChange={handleInputChange} handleFileUpload={handleFileUpload} handleFileRemove={handleFileRemove} documents={documents} />
          <PersonalDetailsSection formData={formData} handleInputChange={handleInputChange} />
          <ProfessionalSection formData={formData} handleInputChange={handleInputChange} />
          <AddressSection formData={formData} handleInputChange={handleInputChange} />
          <ContactSection formData={formData} handleInputChange={handleInputChange} />
          <LanguageAndReligionSection formData={formData} handleInputChange={handleInputChange} />
          <ResidencySection formData={formData} handleInputChange={handleInputChange} />
          <AutoGeneratedFields />
          <ApplicationStatus status={applicationStatus} onStatusChange={setApplicationStatus} />
          <div className="mt-6 p-6 border rounded-lg bg-gray-50 shadow-md">
          <h3 className="text-lg font-semibold text-gray-800 flex items-center gap-2">
            ðŸ’° Visa Fees & Charges
          </h3>
          <div className="mt-2 space-y-2">
            {/* Visa Fees */}
            <div className="flex items-start gap-2">
              <span className="text-gray-600 font-medium">Visa Fees:</span>
              {formData.visa_fees ? (
                typeof formData.visa_fees === "number" ? (
                  <span className="text-gray-700">{formData.visa_fees} INR</span>
                ) : (
                  <ul className="list-disc list-inside text-gray-700">
                    {formData.visa_fees
                      .toString() // Convert number to string if necessary
                      .split(", ") // Split comma-separated values
                      .map((fee, index) => (
                        <li key={index}>{fee} INR</li>
                      ))}
                  </ul>
                )
              ) : (
                <span className="text-gray-500">Not provided</span>
              )}
            </div>

              {/* Charges */}
              <div className="flex items-center gap-2">
                <span className="text-gray-600 font-medium">Charges:</span>
                <span className="text-gray-700">{formData.charges || "Not provided"} INR</span>
              </div>
            </div>
          </div>

          <ActionButtons formData={formData} status={applicationStatus} onSubmit={handleSubmit} isSubmitting={isSubmitting} />
          {showPreview && <VisaPreview isOpen={showPreview} onClose={() => setShowPreview(false)} formData={formData} status={applicationStatus} onSubmit={handleSubmit} isSubmitting={isSubmitting} />}
        </Card>
      </div>
    </div>
  );
}
